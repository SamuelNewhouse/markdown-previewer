{"version":3,"sources":["util/parseMarkdown.js","actions/index.js","util/windowStates.js","reducers/index.js","util/copyToClipboard.js","components/common/WindowBar.js","components/Editor.js","components/Preview.js","components/CopyNotifier.js","components/App.js","index.js","svg/question.svg","svg/shrink2.svg","svg/enlarge2.svg","svg/pencil.svg","svg/mdcopy.svg","svg/eye.svg","svg/htmlcopy.svg"],"names":["renderer","marked","Renderer","link","href","title","text","concat","setOptions","gfm","breaks","sanitize","parseMarkdown","UPDATE_INPUT","SHRINK_WINDOW","ENLARGE_WINDOW","NOTIFY_COPY","updateInput","input","type","shrinkWindow","window","enlargeWindow","notifyCopy","message","SPLIT","initialState","output","editor","preview","copyID","copyMessage","reducer","editorState","previewState","windowFocus","state","arguments","length","undefined","action","Object","assign","createWindowStatesFromEnlarge","copyToClipboard","str","el","document","createElement","value","setAttribute","style","position","left","body","appendChild","select","execCommand","removeChild","WindowBar","_this$props$info","this","props","info","icon","react_default","a","className","src","alt","buttons","map","_ref","onClick","rc_tooltip_es","key","overlay","placement","Component","connect","windowState","dispatch","onChange","event","target","onShrink","onEnlarge","onCopy","toLowerCase","common_WindowBar","editorIcon","name","mdHelp","open","mdCopyIcon","shrinkIcon","enlargeIcon","id","htmlString","previewIcon","htmlCopyIcon","dangerouslySetInnerHTML","__html","ID","App","setInitialMarkdown","Fragment","components_Editor","components_Preview","components_CopyNotifier","markdown","store","createStore","ReactDOM","render","es","components_App","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.7e4f7734.chunk.js","sourcesContent":["import marked from 'marked';\r\n\r\nconst renderer = new marked.Renderer();\r\nrenderer.link = (href, title, text) => {\r\n  if (!title)\r\n    title = \"\";\r\n\r\n  return `<a href=\"${href}\" title=\"${title}\" target=\"_blank\">${text}</a>`\r\n}\r\n\r\nmarked.setOptions({\r\n  renderer: renderer,\r\n  gfm: true,\r\n  breaks: true,\r\n  sanitize: true\r\n});\r\n\r\nconst parseMarkdown = marked;\r\nexport default parseMarkdown;","export const UPDATE_INPUT = 'UPDATE_INPUT'\r\nexport const SHRINK_WINDOW = 'SHRINK_WINDOW'\r\nexport const ENLARGE_WINDOW = 'ENLARGE_WINDOW'\r\nexport const NOTIFY_COPY = 'NOTIFY_COPY'\r\n\r\nexport function updateInput(input) {\r\n  return { type: UPDATE_INPUT, input }\r\n}\r\n\r\nexport function shrinkWindow(window) {\r\n  return { type: SHRINK_WINDOW, window }\r\n}\r\n\r\nexport function enlargeWindow(window) {\r\n  return { type: ENLARGE_WINDOW, window }\r\n}\r\n\r\nexport function notifyCopy(message) {\r\n  return { type: NOTIFY_COPY, message }\r\n}","export const MINIMIZED = \"MINIMIZED\"\r\nexport const MAXIMIZED = \"MAXIMIZED\"\r\nexport const SPLIT = \"SPLIT\"\r\n\r\nexport const createWindowStatesFromShrink = (editorState, previewState, windowFocus) => {\r\n  if(editorState === SPLIT) {\r\n    editorState = MAXIMIZED;\r\n    previewState = MAXIMIZED;\r\n  }\r\n\r\n  if (windowFocus === 'editor') {\r\n    if (previewState === MINIMIZED)\r\n      previewState = MAXIMIZED;\r\n    else\r\n      editorState = MINIMIZED;\r\n  }\r\n  else {\r\n    if (editorState === MINIMIZED)\r\n      editorState = MAXIMIZED;\r\n    else\r\n      previewState = MINIMIZED;\r\n  }\r\n\r\n  if(editorState === previewState) {\r\n    editorState = SPLIT;\r\n    previewState = SPLIT;\r\n  }\r\n\r\n  return { editor: editorState, preview: previewState };\r\n}\r\n\r\nexport const createWindowStatesFromEnlarge = (editorState, previewState, windowFocus) => {\r\n  if(editorState === SPLIT) {\r\n    editorState = MAXIMIZED;\r\n    previewState = MAXIMIZED;\r\n  }\r\n\r\n  if (windowFocus === 'editor') {\r\n    if (editorState === MINIMIZED)\r\n      editorState = MAXIMIZED;\r\n    else\r\n      previewState = MINIMIZED;\r\n  }\r\n  else {\r\n    if (previewState === MINIMIZED)\r\n      previewState = MAXIMIZED;\r\n    else\r\n      editorState = MINIMIZED;\r\n  }\r\n\r\n  if(editorState === previewState) {\r\n    editorState = SPLIT;\r\n    previewState = SPLIT;\r\n  }\r\n\r\n\r\n  return { editor: editorState, preview: previewState };\r\n}","import parseMarkdown from '../util/parseMarkdown';\r\nimport {\r\n  UPDATE_INPUT,\r\n  SHRINK_WINDOW,\r\n  ENLARGE_WINDOW,\r\n  NOTIFY_COPY } from '../actions';\r\nimport {\r\n  SPLIT,\r\n  createWindowStatesFromEnlarge,\r\n  createWindowStatesFromShrink\r\n} from '../util/windowStates';\r\n\r\nconst initialState = {\r\n  input: \"\",\r\n  output: \"\",\r\n  editor: SPLIT,\r\n  preview: SPLIT,\r\n  copyID: 0,\r\n  copyMessage: \"\"\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n\r\n    case UPDATE_INPUT:\r\n      return Object.assign({}, state, {\r\n        input: action.input,\r\n        output: parseMarkdown(action.input)\r\n      });\r\n\r\n    case SHRINK_WINDOW:\r\n      return Object.assign({}, state,\r\n        createWindowStatesFromShrink(state.editor, state.preview, action.window));\r\n\r\n    case ENLARGE_WINDOW:\r\n      return Object.assign({}, state,\r\n        createWindowStatesFromEnlarge(state.editor, state.preview, action.window));\r\n\r\n    case NOTIFY_COPY:\r\n      return Object.assign({}, state, {\r\n        copyID: state.copyID + 1,\r\n        copyMessage: action.message\r\n      });\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default reducer;","// https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f\r\n\r\nconst copyToClipboard = str => {\r\n  const el = document.createElement('textarea');\r\n  el.value = str;\r\n  el.setAttribute('readonly', '');\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';\r\n  document.body.appendChild(el);\r\n  el.select();\r\n  document.execCommand('copy');\r\n  document.body.removeChild(el);\r\n};\r\n\r\nexport default copyToClipboard;","import React, { Component } from 'react';\r\nimport Tooltip from 'rc-tooltip';\r\nimport '../../tooltip.scss';\r\n\r\nclass WindowBar extends Component {\r\n  render() {\r\n    const { icon, title } = this.props.info;\r\n    return (\r\n      <div className=\"window-bar bg-info d-flex align-items-center\">\r\n        <img className=\"m-2\" src={icon} alt={title}></img>\r\n        <span className=\"flex-grow-1 title\" >{title}</span>\r\n        {\r\n          this.props.buttons.map(({ icon, title, onClick }) =>\r\n            <Tooltip key={title} overlay={title} placement=\"bottom\">\r\n              <button type=\"button\" className=\"btn btn-sm btn-info m-1\" onClick={onClick}>\r\n                <img key={title} src={icon} alt={title}></img>\r\n              </button>\r\n            </Tooltip>\r\n          )\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WindowBar;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateInput, shrinkWindow, enlargeWindow, notifyCopy } from '../actions/index';\r\nimport copyToClipboard from '../util/copyToClipboard';\r\nimport WindowBar from './common/WindowBar'\r\nimport editorIcon from '../svg/pencil.svg';\r\nimport mdHelp from '../svg/question.svg';\r\nimport mdCopyIcon from '../svg/mdcopy.svg';\r\nimport shrinkIcon from '../svg/shrink2.svg';\r\nimport enlargeIcon from '../svg/enlarge2.svg';\r\n\r\nconst Editor = ({ value, windowState, onChange, onShrink, onEnlarge, onCopy }) => {\r\n  return (\r\n    <div className={`m-2 content ${windowState.toLowerCase()}`}>\r\n      <WindowBar\r\n        info={{\r\n          icon: editorIcon,\r\n          title: 'Edit',\r\n          name: 'editor'\r\n        }}\r\n        buttons={[\r\n          { title: 'Markdown Help', icon: mdHelp, onClick: () => {\r\n            window.open('https://www.markdownguide.org', '_blank')\r\n          }},\r\n          { title: 'Copy Markdown', icon: mdCopyIcon, onClick: () => {\r\n            copyToClipboard(value);\r\n            onCopy('Markdown copied to clipbaord.');\r\n          }},\r\n          { title: 'Shrink', icon: shrinkIcon, onClick: onShrink },\r\n          { title: 'Enlarge', icon: enlargeIcon, onClick: onEnlarge }\r\n        ]}\r\n      />\r\n      <textarea\r\n        className=\"bg-dark text-white border border-secondary p-2\"\r\n        id=\"editor\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    value: state.input,\r\n    windowState: state.editor\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onChange: event => dispatch(updateInput(event.target.value)),\r\n    onShrink: () => dispatch(shrinkWindow('editor')),\r\n    onEnlarge: () => dispatch(enlargeWindow('editor')),\r\n    onCopy: message => dispatch(notifyCopy(message))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Editor);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { shrinkWindow, enlargeWindow, notifyCopy } from '../actions/index';\r\nimport copyToClipboard from '../util/copyToClipboard';\r\nimport WindowBar from './common/WindowBar'\r\nimport previewIcon from '../svg/eye.svg';\r\nimport mdHelp from '../svg/question.svg';\r\nimport htmlCopyIcon from '../svg/htmlcopy.svg';\r\nimport shrinkIcon from '../svg/shrink2.svg';\r\nimport enlargeIcon from '../svg/enlarge2.svg';\r\n\r\nconst Preview = ({ htmlString, windowState, onShrink, onEnlarge, onCopy }) => {\r\n  return (\r\n    <div className={`m-2 content ${windowState.toLowerCase()}`}>\r\n      <WindowBar\r\n        info={{\r\n          icon: previewIcon,\r\n          title: 'View',\r\n          name: 'preview'\r\n        }}\r\n        buttons={[\r\n          { title: 'Markdown Help', icon: mdHelp, onClick: () => {\r\n            window.open('https://www.markdownguide.org', '_blank')\r\n          }},\r\n          { title: 'Copy HTML', icon: htmlCopyIcon, onClick: () => {\r\n            copyToClipboard(htmlString);\r\n            onCopy('HTML copied to clipboard.');\r\n          }},\r\n          { title: 'Shrink', icon: shrinkIcon, onClick: onShrink },\r\n          { title: 'Enlarge', icon: enlargeIcon, onClick: onEnlarge }\r\n        ]}\r\n      />\r\n\r\n      <div\r\n        className=\"bg-light text-dark border border-secondary p-2 content\"\r\n        id=\"preview\"\r\n        dangerouslySetInnerHTML={{ __html: htmlString }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    htmlString: state.output,\r\n    windowState: state.preview\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onShrink: () => dispatch(shrinkWindow('preview')),\r\n    onEnlarge: () => dispatch(enlargeWindow('preview')),\r\n    onCopy: message => dispatch(notifyCopy(message))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Preview);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../copyNotifier.scss';\r\n\r\nconst CopyNotifier = props => {\r\n  if (props.ID < 1) // Don't do anything on initial load.\r\n    return null\r\n\r\n  return (\r\n    // Force animation restart with new key\r\n    <div key={props.ID} className=\"copy-notifier\">\r\n      {props.message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ID: state.copyID,\r\n    message: state.copyMessage\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(CopyNotifier);","import React, { Component } from 'react';\r\nimport Editor from './Editor';\r\nimport Preview from './Preview';\r\nimport CopyNotifier from './CopyNotifier';\r\nimport { updateInput } from '../actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst introMarkDown =\r\n  `# Markdown Previewer\r\n## A freecodecamp.org project\r\n\r\nSee [freecodecamp.org](https://www.freecodecamp.org)\r\n\r\nHere's some \\`inline code\\`\r\n\r\n    <!-- This is a code block -->\r\n    <html>\r\n      <body>\r\n      </body>\r\n    </html>\r\n\r\n* List Item A\r\n* List Item B\r\n* List Item C\r\n\r\n> This is a block quote\r\n\r\nHere's an image\r\n![alt text here](https://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Codinglogo.jpg/480px-Codinglogo.jpg)\r\n\r\n**Here's some bold text**`;\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.setInitialMarkdown(introMarkDown);\r\n  }\r\n  render() {\r\n    return <>\r\n      <Editor />\r\n      <Preview />\r\n      <CopyNotifier />\r\n    </>\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setInitialMarkdown: (markdown) => dispatch(updateInput(markdown))\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(App);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducers';\nimport App from './components/App';\nimport './index.scss'\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);","module.exports = __webpack_public_path__ + \"static/media/question.7905d19e.svg\";","module.exports = __webpack_public_path__ + \"static/media/shrink2.2e08aa9f.svg\";","module.exports = __webpack_public_path__ + \"static/media/enlarge2.d663d5d7.svg\";","module.exports = __webpack_public_path__ + \"static/media/pencil.8809d3cf.svg\";","module.exports = __webpack_public_path__ + \"static/media/mdcopy.b2c3197e.svg\";","module.exports = __webpack_public_path__ + \"static/media/eye.6955fcfe.svg\";","module.exports = __webpack_public_path__ + \"static/media/htmlcopy.cb244187.svg\";"],"sourceRoot":""}